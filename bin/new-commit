#bash

function  Main() {
    local  subCommand="$1"
    AssertInstalled  "git"
    if [ "${subCommand}" == "" ]; then
        NewCommit
    elif [ "${subCommand}" == "push" ]; then
        Push  "$@"
    else
        Error  "ERROR: Unknown sub command \"${subCommand}\""
    fi
}

function  NewCommit() {
    local  currentFolder="$(pwd)"
    local  gitWorkingRootPath="$(GetGitWorkingRootPath)"
    local  outputFolderName
    if [ ! -e ".commit" ]; then
        outputFolderName=".commit"
    else
        outputFolderName=".commit_new"
    fi

    #// Copy files by "git checkout-index"
    if [ "${gitWorkingRootPath}" == "" ]; then
        rm -rf  "${outputFolderName}"
        git init  > /dev/null  2>&1
        git add "."  > /dev/null  2>&1
        git commit  -m "temporary"  > /dev/null  2>&1
        mkdir  "${outputFolderName}"

        git checkout-index -a -f --prefix="${outputFolderName}/"
        rm -rf  ".git"
    else
        rm -rf  "${outputFolderName}"
        if [ "${currentFolder}" == "${gitWorkingRootPath}" ]; then

            git checkout-index -a -f --prefix="${outputFolderName}/"
        else
            local  relativePath="$( GetRelativePath "${currentFolder}" "${gitWorkingRootPath}" )"
            local  gitOutputPath="${gitWorkingRootPath}/.commit_new/${relativePath}"

            git checkout-index -a -f --prefix=".commit_new/"
            mv  "${gitOutputPath}"  "${outputFolderName}"
        fi
    fi

    #// Set read only
    find "${outputFolderName}" -type f | xargs  chmod -w

    #// Show different file names
    if [ "${outputFolderName}" == ".commit" ]; then
        echo  'Created new ".commit" folder.'
        echo  'This will be treated as base commit.'
    fi

    if [ "${outputFolderName}" == ".commit_new" ]; then
        local  diff_output="$( diff -qr  ".commit"  ".commit_new" )"

        if [ "${diff_output}" == "" ]; then
            rm -rf  ".commit_new"
            echo  'Deleted ".commit_new" folder.'
            echo  'SAME as ".commit" folder.'
        else
            echo  'Created new ".commit_new" folder.'
            echo  'Changes for .commit:'
            echoWithIndent  "${diff_output}"  "    "
        fi
    fi
}

function  Push() {
    local  mainFolderPath="$2"
    if [ "${mainFolderPath}" == "" ]; then
        Error  "ERROR: No main folder  Command: new-commit push __MainFolder__"
    fi
    AssertExist  "${mainFolderPath}"
    AssertExist  ".commit"
    AssertExist  ".commit_new"
    echo  "Copied files and disabled read only to \"${mainFolderPath}\" folder"
    echo  "Moved \".commit_new\" to \".commit\" folder"

    #// Copy files and disable read only
    ls -a "${mainFolderPath}" | grep -v "\\.git\\|\\.\\|\\.." | xargs -I{} \
        rm -rf  "${mainFolderPath}/{}"
    rsync -a  ".commit_new/"  "${mainFolderPath}/"
    find "${mainFolderPath}" -type f | xargs \
        chmod +w

    #// Update .commit folder
    rm -rf  ".commit"
    mv  ".commit_new"  ".commit"
}

function  echoWithIndent() {
    local  message="$1"
    local  indent="$2"

    IFS=$'\n'
    for  line  in ${message}; do
        echo "${indent}${line}"
    done
    unset IFS
}

function  GetGitWorkingRootPath() {
    local  path="$(pwd)"
    while [ "${path}" != "" ]; do

        if [ -e "${path}/.git" ]; then
            echo  "${path}"
            return
        fi
        path="${path/*}" 
    done

    echo  ""
}

function  GetRelativePath() {
    local  fullPath="$1"
    local  basePath="$2"

    local  relativePath=$( echo "$fullPath" | sed -e "s%^${basePath}/%%" )
    echo  "${relativePath}"
}

function  AssertExist() {
    local  path="$1"

    if [ ! -e "${path}" ]; then
        Error  "ERROR: Not found \"${path}\""
    fi
}

function  AssertInstalled() {
    local  checkingCommand="$1"
    local  exists=${False}
    which "${checkingCommand}" > /dev/null  &&  exists=${True}

    if [ "${exists}" == ${False} ]; then
        Error  "ERROR: Not installed \"${checkingCommand}\" command"
    fi
}

function  Error() {
    local  errorMessage="$1"
    echo  "${errorMessage}"
    exit  2
}

True=0
False=1

Main  "$@"
